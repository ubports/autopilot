Welcome to the Autopilot source code!
#####################################

Autopilot is a tool for writing functional tests for GUI applications.

Autopilot is free software, licensed under GNU General Public License (GPLv3+).

Links
=====

- Project Home (Source Code, Version Control, Bug Tracking, etc):
  https://launchpad.net/autopilot

- Documentation (Tutorial, FAQ, API Reference, etc):
  https://developer.ubuntu.com/api/devel/ubuntu-14.10/python/autopilot/

- IRC channel is #ubuntu-autopilot on irc.freenode.net


Build Instructions
==================

Autopilot is not buildable within a python virtualenv, as it requires several packages that are not available on ``pypi``. Instead, either use autopilot from the source tree, or build debian packages instead. Instructions for building debian packges are below:

Assuming a current ubuntu installation, make sure you have the build tools required installed::

	$ sudo apt-get install devscripts bzr-builddeb

Then install the build-dependencies for the autopilot packages::

	$ sudo mk-build-deps -i

Then build the debian packages::

	$ bzr bd

bzr-builddeb will build binary packages into the parent directory, or into '../build-dir/' if you do not own the correct gpg key to sign the package. The resulting ``.deb`` files can be installed as normal with ``dpkg -i package.deb``.

The documentation can be built separately from the debian packages::

	$ python3 setup.py build_sphinx

The docs are built into 'build/sphinx/html', and can be opened in the default browser with::

	$ xdg-open build/sphinx/html/index.html

Release Manual Tests
====================

Not all our tests are automated at the moment. Specifically, the vis tool is lacking some automated tests due to deficiancies in other packages. Until we remedy this situation, the following things need to be manually tested upon an autopilot release:

- Run the following tests by running both: ``autopilot vis`` and ``autopilot3 vis``.
 - Run 'window-mocker -testability' and the vis tool.
  - Make sure you can select window-mocker from the connection list.
  - Make sure the top-level tree node is 'window-mocker'
 - Run the vis tool with the '-testability' flag enabled. Run a second vis tool, and make sure that the second vis tool can introspect the first.
 - Make sure that the component overlay feature highlights the selected item in the tree view, as long as it has a globalRect.
 - Make sure that searching works:
  - Searching narrows down tree view to just the nodes that match the search criteria.
  - Searching turns off the current component overlay (if any).
  - Resetting the search restores the tree view to the full tree.
  - Resetting the search turns off the current component overlay (if any).
